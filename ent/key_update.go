// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/riadafridishibly/vault-app/ent/key"
	"github.com/riadafridishibly/vault-app/ent/predicate"
)

// KeyUpdate is the builder for updating Key entities.
type KeyUpdate struct {
	config
	hooks    []Hook
	mutation *KeyMutation
}

// Where appends a list predicates to the KeyUpdate builder.
func (ku *KeyUpdate) Where(ps ...predicate.Key) *KeyUpdate {
	ku.mutation.Where(ps...)
	return ku
}

// SetType sets the "type" field.
func (ku *KeyUpdate) SetType(s string) *KeyUpdate {
	ku.mutation.SetType(s)
	return ku
}

// SetPublicKey sets the "public_key" field.
func (ku *KeyUpdate) SetPublicKey(s string) *KeyUpdate {
	ku.mutation.SetPublicKey(s)
	return ku
}

// SetPrivateKey sets the "private_key" field.
func (ku *KeyUpdate) SetPrivateKey(s string) *KeyUpdate {
	ku.mutation.SetPrivateKey(s)
	return ku
}

// SetCreatedAt sets the "created_at" field.
func (ku *KeyUpdate) SetCreatedAt(t time.Time) *KeyUpdate {
	ku.mutation.SetCreatedAt(t)
	return ku
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ku *KeyUpdate) SetNillableCreatedAt(t *time.Time) *KeyUpdate {
	if t != nil {
		ku.SetCreatedAt(*t)
	}
	return ku
}

// SetUpdatedAt sets the "updated_at" field.
func (ku *KeyUpdate) SetUpdatedAt(t time.Time) *KeyUpdate {
	ku.mutation.SetUpdatedAt(t)
	return ku
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ku *KeyUpdate) SetNillableUpdatedAt(t *time.Time) *KeyUpdate {
	if t != nil {
		ku.SetUpdatedAt(*t)
	}
	return ku
}

// Mutation returns the KeyMutation object of the builder.
func (ku *KeyUpdate) Mutation() *KeyMutation {
	return ku.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ku *KeyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ku.hooks) == 0 {
		affected, err = ku.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KeyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ku.mutation = mutation
			affected, err = ku.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ku.hooks) - 1; i >= 0; i-- {
			if ku.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ku.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ku.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ku *KeyUpdate) SaveX(ctx context.Context) int {
	affected, err := ku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ku *KeyUpdate) Exec(ctx context.Context) error {
	_, err := ku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ku *KeyUpdate) ExecX(ctx context.Context) {
	if err := ku.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ku *KeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   key.Table,
			Columns: key.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: key.FieldID,
			},
		},
	}
	if ps := ku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ku.mutation.GetType(); ok {
		_spec.SetField(key.FieldType, field.TypeString, value)
	}
	if value, ok := ku.mutation.PublicKey(); ok {
		_spec.SetField(key.FieldPublicKey, field.TypeString, value)
	}
	if value, ok := ku.mutation.PrivateKey(); ok {
		_spec.SetField(key.FieldPrivateKey, field.TypeString, value)
	}
	if value, ok := ku.mutation.CreatedAt(); ok {
		_spec.SetField(key.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ku.mutation.UpdatedAt(); ok {
		_spec.SetField(key.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{key.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// KeyUpdateOne is the builder for updating a single Key entity.
type KeyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KeyMutation
}

// SetType sets the "type" field.
func (kuo *KeyUpdateOne) SetType(s string) *KeyUpdateOne {
	kuo.mutation.SetType(s)
	return kuo
}

// SetPublicKey sets the "public_key" field.
func (kuo *KeyUpdateOne) SetPublicKey(s string) *KeyUpdateOne {
	kuo.mutation.SetPublicKey(s)
	return kuo
}

// SetPrivateKey sets the "private_key" field.
func (kuo *KeyUpdateOne) SetPrivateKey(s string) *KeyUpdateOne {
	kuo.mutation.SetPrivateKey(s)
	return kuo
}

// SetCreatedAt sets the "created_at" field.
func (kuo *KeyUpdateOne) SetCreatedAt(t time.Time) *KeyUpdateOne {
	kuo.mutation.SetCreatedAt(t)
	return kuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kuo *KeyUpdateOne) SetNillableCreatedAt(t *time.Time) *KeyUpdateOne {
	if t != nil {
		kuo.SetCreatedAt(*t)
	}
	return kuo
}

// SetUpdatedAt sets the "updated_at" field.
func (kuo *KeyUpdateOne) SetUpdatedAt(t time.Time) *KeyUpdateOne {
	kuo.mutation.SetUpdatedAt(t)
	return kuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (kuo *KeyUpdateOne) SetNillableUpdatedAt(t *time.Time) *KeyUpdateOne {
	if t != nil {
		kuo.SetUpdatedAt(*t)
	}
	return kuo
}

// Mutation returns the KeyMutation object of the builder.
func (kuo *KeyUpdateOne) Mutation() *KeyMutation {
	return kuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kuo *KeyUpdateOne) Select(field string, fields ...string) *KeyUpdateOne {
	kuo.fields = append([]string{field}, fields...)
	return kuo
}

// Save executes the query and returns the updated Key entity.
func (kuo *KeyUpdateOne) Save(ctx context.Context) (*Key, error) {
	var (
		err  error
		node *Key
	)
	if len(kuo.hooks) == 0 {
		node, err = kuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KeyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kuo.mutation = mutation
			node, err = kuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kuo.hooks) - 1; i >= 0; i-- {
			if kuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, kuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Key)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from KeyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kuo *KeyUpdateOne) SaveX(ctx context.Context) *Key {
	node, err := kuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kuo *KeyUpdateOne) Exec(ctx context.Context) error {
	_, err := kuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kuo *KeyUpdateOne) ExecX(ctx context.Context) {
	if err := kuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kuo *KeyUpdateOne) sqlSave(ctx context.Context) (_node *Key, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   key.Table,
			Columns: key.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: key.FieldID,
			},
		},
	}
	id, ok := kuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Key.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, key.FieldID)
		for _, f := range fields {
			if !key.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != key.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kuo.mutation.GetType(); ok {
		_spec.SetField(key.FieldType, field.TypeString, value)
	}
	if value, ok := kuo.mutation.PublicKey(); ok {
		_spec.SetField(key.FieldPublicKey, field.TypeString, value)
	}
	if value, ok := kuo.mutation.PrivateKey(); ok {
		_spec.SetField(key.FieldPrivateKey, field.TypeString, value)
	}
	if value, ok := kuo.mutation.CreatedAt(); ok {
		_spec.SetField(key.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := kuo.mutation.UpdatedAt(); ok {
		_spec.SetField(key.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Key{config: kuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{key.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
