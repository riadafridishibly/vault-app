// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/riadafridishibly/vault-app/ent/masterpassword"
)

// MasterPassword is the model entity for the MasterPassword schema.
type MasterPassword struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PasswordHash holds the value of the "password_hash" field.
	PasswordHash string `json:"password_hash,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MasterPassword) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case masterpassword.FieldID:
			values[i] = new(sql.NullInt64)
		case masterpassword.FieldPasswordHash:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MasterPassword", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MasterPassword fields.
func (mp *MasterPassword) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case masterpassword.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mp.ID = int(value.Int64)
		case masterpassword.FieldPasswordHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_hash", values[i])
			} else if value.Valid {
				mp.PasswordHash = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this MasterPassword.
// Note that you need to call MasterPassword.Unwrap() before calling this method if this MasterPassword
// was returned from a transaction, and the transaction was committed or rolled back.
func (mp *MasterPassword) Update() *MasterPasswordUpdateOne {
	return (&MasterPasswordClient{config: mp.config}).UpdateOne(mp)
}

// Unwrap unwraps the MasterPassword entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mp *MasterPassword) Unwrap() *MasterPassword {
	_tx, ok := mp.config.driver.(*txDriver)
	if !ok {
		panic("ent: MasterPassword is not a transactional entity")
	}
	mp.config.driver = _tx.drv
	return mp
}

// String implements the fmt.Stringer.
func (mp *MasterPassword) String() string {
	var builder strings.Builder
	builder.WriteString("MasterPassword(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mp.ID))
	builder.WriteString("password_hash=")
	builder.WriteString(mp.PasswordHash)
	builder.WriteByte(')')
	return builder.String()
}

// MasterPasswords is a parsable slice of MasterPassword.
type MasterPasswords []*MasterPassword

func (mp MasterPasswords) config(cfg config) {
	for _i := range mp {
		mp[_i].config = cfg
	}
}
