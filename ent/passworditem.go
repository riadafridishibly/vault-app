// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/riadafridishibly/vault-app/ent/passworditem"
)

// PasswordItem is the model entity for the PasswordItem schema.
type PasswordItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar *string `json:"avatar,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// SiteName holds the value of the "site_name" field.
	SiteName *string `json:"site_name,omitempty"`
	// SiteURL holds the value of the "site_url" field.
	SiteURL *string `json:"site_url,omitempty"`
	// Username holds the value of the "username" field.
	Username *string `json:"username,omitempty"`
	// UsernameType holds the value of the "username_type" field.
	UsernameType *string `json:"username_type,omitempty"`
	// Password holds the value of the "password" field.
	Password *string `json:"password,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PasswordItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case passworditem.FieldTags:
			values[i] = new([]byte)
		case passworditem.FieldID:
			values[i] = new(sql.NullInt64)
		case passworditem.FieldAvatar, passworditem.FieldDescription, passworditem.FieldSiteName, passworditem.FieldSiteURL, passworditem.FieldUsername, passworditem.FieldUsernameType, passworditem.FieldPassword:
			values[i] = new(sql.NullString)
		case passworditem.FieldCreateTime, passworditem.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PasswordItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PasswordItem fields.
func (pi *PasswordItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case passworditem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case passworditem.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pi.CreateTime = value.Time
			}
		case passworditem.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pi.UpdateTime = value.Time
			}
		case passworditem.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				pi.Avatar = new(string)
				*pi.Avatar = value.String
			}
		case passworditem.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pi.Description = new(string)
				*pi.Description = value.String
			}
		case passworditem.FieldSiteName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field site_name", values[i])
			} else if value.Valid {
				pi.SiteName = new(string)
				*pi.SiteName = value.String
			}
		case passworditem.FieldSiteURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field site_url", values[i])
			} else if value.Valid {
				pi.SiteURL = new(string)
				*pi.SiteURL = value.String
			}
		case passworditem.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				pi.Username = new(string)
				*pi.Username = value.String
			}
		case passworditem.FieldUsernameType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username_type", values[i])
			} else if value.Valid {
				pi.UsernameType = new(string)
				*pi.UsernameType = value.String
			}
		case passworditem.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				pi.Password = new(string)
				*pi.Password = value.String
			}
		case passworditem.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pi.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this PasswordItem.
// Note that you need to call PasswordItem.Unwrap() before calling this method if this PasswordItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *PasswordItem) Update() *PasswordItemUpdateOne {
	return (&PasswordItemClient{config: pi.config}).UpdateOne(pi)
}

// Unwrap unwraps the PasswordItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *PasswordItem) Unwrap() *PasswordItem {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: PasswordItem is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *PasswordItem) String() string {
	var builder strings.Builder
	builder.WriteString("PasswordItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("create_time=")
	builder.WriteString(pi.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(pi.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pi.Avatar; v != nil {
		builder.WriteString("avatar=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pi.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pi.SiteName; v != nil {
		builder.WriteString("site_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pi.SiteURL; v != nil {
		builder.WriteString("site_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pi.Username; v != nil {
		builder.WriteString("username=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pi.UsernameType; v != nil {
		builder.WriteString("username_type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pi.Password; v != nil {
		builder.WriteString("password=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", pi.Tags))
	builder.WriteByte(')')
	return builder.String()
}

// PasswordItems is a parsable slice of PasswordItem.
type PasswordItems []*PasswordItem

func (pi PasswordItems) config(cfg config) {
	for _i := range pi {
		pi[_i].config = cfg
	}
}
